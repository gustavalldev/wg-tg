require('dotenv').config();
const { Telegraf } = require('telegraf');
const axios = require('axios');

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const WG_API_URL = process.env.WG_API_URL || 'http://localhost:3000';

// –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏, –¥–ª—è MVP)
const users = new Map();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ peer
function generateIP() {
    // –ù–∞—á–∏–Ω–∞–µ–º —Å 10.8.0.2 (10.8.0.1 - —Å–µ—Ä–≤–µ—Ä)
    const baseIP = 2;
    const usedIPs = Array.from(users.values());
    for (let i = baseIP; i <= 254; i++) {
        const ip = `10.8.0.${i}`;
        if (!usedIPs.includes(ip)) {
            return ip;
        }
    }
    throw new Error('–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤');
}

// /start
bot.start(async (ctx) => {
    try {
        await ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤—ã–¥–∞—á–∏ VPN-–¥–æ—Å—Ç—É–ø–∞. –ò—Å–ø–æ–ª—å–∑—É–π /getvpn —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥, –∏–ª–∏ /remove —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –¥–æ—Å—Ç—É–ø.');
    } catch (err) {
        handleTelegramError(err, ctx);
    }
});

// /getvpn
bot.command('getvpn', async (ctx) => {
    try {
        const userId = ctx.from.id.toString();
        
        if (users.has(userId)) {
            await ctx.reply('‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å VPN-–ø—Ä–æ—Ñ–∏–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remove —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ñ–∏–ª—å.');
            return;
        }

        await ctx.reply('üîß –ì–µ–Ω–µ—Ä–∏—Ä—É—é peer –∏ –∫–æ–Ω—Ñ–∏–≥...');
        
        const peerName = `tg_${userId}`;
        const peerIP = generateIP();
        
        const response = await axios.post(`${WG_API_URL}/api/peers`, {
            name: peerName,
            ip: peerIP
        });
        
        users.set(userId, peerIP);
        
        await ctx.replyWithDocument({
            source: Buffer.from(response.data.config),
            filename: `wg-${userId}.conf`
        });
        
        await ctx.reply('‚úÖ –í–∞—à VPN-–ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤!');
        
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ /getvpn:', err.response?.data || err.message);
        try {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ peer. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } catch (innerErr) {
            handleTelegramError(innerErr, ctx);
        }
    }
});

// /remove
bot.command('remove', async (ctx) => {
    try {
        const userId = ctx.from.id.toString();
        
        if (!users.has(userId)) {
            await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ VPN-–ø—Ä–æ—Ñ–∏–ª—è.');
            return;
        }
        
        await ctx.reply('üóëÔ∏è –£–¥–∞–ª—è—é –≤–∞—à VPN-–ø—Ä–æ—Ñ–∏–ª—å...');
        
        const peerName = `tg_${userId}`;
        await axios.delete(`${WG_API_URL}/api/peers/${peerName}`);
        
        users.delete(userId);
        
        await ctx.reply('‚úÖ –í–∞—à VPN-–ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω.');
        
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ /remove:', err.response?.data || err.message);
        try {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ peer. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } catch (innerErr) {
            handleTelegramError(innerErr, ctx);
        }
    }
});

// /status
bot.command('status', async (ctx) => {
    try {
        const response = await axios.get(`${WG_API_URL}/health`);
        await ctx.reply('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } catch (err) {
        try {
            await ctx.reply('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        } catch (innerErr) {
            handleTelegramError(innerErr, ctx);
        }
    }
});

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 403 –æ—à–∏–±–æ–∫
function handleTelegramError(err, ctx) {
    if (err.response?.data?.description?.includes('bot was blocked')) {
        console.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from?.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞`);
    } else {
        console.error('–û—à–∏–±–∫–∞ Telegram:', err.message);
    }
}
